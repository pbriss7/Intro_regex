# Exemple simple d'une expression régulière qui identifie tous les mots commençant par une majuscule.
texte <- "Victor Hugo, Emile Zola, et Jean-Paul Sartre sont des écrivains célèbres."
pattern <- "\\b[A-Z][a-z]+\\b"
str_extract_all(texte, pattern)
inst_ext_fun <- function(extension) {
if(!extension %in% rownames(installed.packages())) {
install.packages(extension, dependencies = TRUE)
}
require(extension, character.only = TRUE)
}
extensions <- c("data.table",
"stringr",
"dplyr",
"ggplot2")
sapply(extensions, inst_ext_fun)
# Nettoyage de l'environnement
rm(list = ls())
#| include: false
inst_ext_fun <- function(extension) {
if(!extension %in% rownames(installed.packages())) {
install.packages(extension, dependencies = TRUE)
}
require(extension, character.only = TRUE)
}
extensions <- c("data.table",
"stringr",
"dplyr",
"ggplot2")
sapply(extensions, inst_ext_fun)
# Nettoyage de l'environnement
rm(list = ls())
str_extract_all(texte, pattern) |> unlist()
# Exemple simple d'une expression régulière qui identifie tous les mots commençant par une majuscule.
texte <- "Victor Hugo, Emile Zola, et Jean-Paul Sartre sont des écrivains célèbres."
pattern <- "\\b[A-Z][a-z]+\\b"
str_extract_all(texte, pattern) |> unlist()
# Exemple simple d'une expression régulière qui identifie tous les mots commençant par une majuscule.
texte <- "Victor Hugo, Emile Zola, et Jean-Paul Sartre sont des écrivains célèbres."
pattern <- "\\b[A-Z]\\s[a-z]+\\b"
str_extract_all(texte, pattern) |> unlist()
# Exemple simple d'une expression régulière qui identifie tous les mots commençant par une majuscule.
texte <- "Victor Hugo, Emile Zola, et Jean-Paul Sartre sont des écrivains célèbres."
pattern <- "\\b[A-Z][a-z]+\\b"
str_extract_all(texte, pattern) |> unlist()
# Importation sous forme de tableau de données du texte de Maria Chapdelaine avec son identifiant unique
maria <-
gutenberg_download(13525, mirror = "http://mirror.csclub.uwaterloo.ca/gutenberg/")
inst_ext_fun <- function(extension) {
if(!extension %in% rownames(installed.packages())) {
install.packages(extension, dependencies = TRUE)
}
require(extension, character.only = TRUE)
}
extensions <- c("data.table",
"stringr",
"dplyr",
"ggplot2",
"gutenbergr")
sapply(extensions, inst_ext_fun)
# Nettoyage de l'environnement
rm(list = ls())
# Importation sous forme de tableau de données du texte de Maria Chapdelaine avec son identifiant unique
maria <-
gutenberg_download(13525, mirror = "http://mirror.csclub.uwaterloo.ca/gutenberg/")
# Transformation de l'encodage des chaînes de caractères du vecteur `text`
maria$text <- iconv(maria$text, from = "latin1", "utf8")
View(maria)
# Élimination des lignes blanches
maria <- maria[maria$text != "",]
View(maria)
# Élimination du péritexte
maria <- maria[grep("CHAPITRE I\\b", maria$text):nrow(maria),]
# Repérage de la ligne correspondant à chaque début de chapitre
debut_chapitres_v <- which(grepl("CHAPITRE", maria$text))
# Utilisation du vecteur précédent pour indiquer la ligne correspondant à la fin de chaque chapitre
fin_chapitres_v <-
append((debut_chapitres_v[-1] - 1), length(maria$text))
# Création d'une petite fonction permettant la séparation des mots d'une chaîne de caractères (tokénisation)
tokenisation_fun <-
function(texte, debut_chapitre, fin_chapitre) {
texte_v <- texte[as.integer(debut_chapitre):as.integer(fin_chapitre)]
mots_l <- strsplit(texte_v, "\\W")    # séparation de tous les mots
mots_v <- unlist(mots_l)              # transformation de l'objet liste en vecteur
mots_v <- tolower(mots_v)             # Bas de casse
mots_pleins_v <- which(mots_v != "")  # Identificatioon des éléments vides
mots_v <- mots_v[mots_pleins_v]       # Élimination des éléments vides
mots_v <- mots_v[-c(1:2)]             # Élimination des noms de chapitre
return(mots_v)                        # Renvoi explicite de l'objet vecteur
}
# Création d'une liste vide dans laquelle on emmagasinera les mots de chacun des chapitres
mots_chapitres <-
vector(mode = "list", length = length(debut_chapitres_v))
# On remplit notre objet liste avec les mots de chacun des chapitre (à l'aide d'une structure de contrôle appelée "boucle for")
for (i in seq_along(debut_chapitres_v)) {
mots_chapitres[[i]] <- tokenisation_fun(
texte = maria$text,
debut_chapitre = (debut_chapitres_v[i]),
fin_chapitre = fin_chapitres_v[i]
)
}
# On crée un nouveau tableau de données comprenant une colonne pour les numéros de chapitres:
mots_chapitres_df <-
data.frame(
chapitre = c(
"I",
"II",
"III",
"IV",
"V",
"VI",
"VII",
"VIII",
"IX",
"X",
"XI",
"XII",
"XIII",
"XIV",
"XV",
"XVI"
)
)
# ... une colonne où seront rassemblés tous les mots sous forme de liste:
mots_chapitres_df$mots <- sapply(mots_chapitres, "[")
# Et une colonne indiquant le nombre de mots de chaque chapitre
mots_chapitres_df$longueur_chap <- sapply(mots_chapitres, length)
# Création d'une colonne avec tous les mots de chaque chapitre distinct joints en une seule chaine de caractères
mots_chapitres_df$texte <-
sapply(mots_chapitres_df$mots, paste, collapse = " ")
mots_chapitres_df$francois <-
str_count(mots_chapitres_df$texte, pattern = "fran[cç]ois")
mots_chapitres_df$lorenzo <-
str_count(mots_chapitres_df$texte, pattern = "lorenzo")
mots_chapitres_df$eutrope <-
str_count(mots_chapitres_df$texte, pattern = "eutrope")
View(mots_chapitres_df)
# Importation sous forme de tableau de données du texte de Maria Chapdelaine avec son identifiant unique
maria <-
maria <-
gutenberg_download(13525, mirror = "http://mirror.csclub.uwaterloo.ca/gutenberg/")
# Importation sous forme de tableau de données du texte de Maria Chapdelaine avec son identifiant unique
saveRDS(maria, "donnees/maria.RDS")
#| output: false
# Importation sous forme de tableau de données du texte de Maria Chapdelaine avec son identifiant unique
maria <- readRDS("donnees/maria.RDS")
#maria <-
#  gutenberg_download(13525, mirror = "http://mirror.csclub.uwaterloo.ca/gutenberg/")
# Transformation de l'encodage des chaînes de caractères du vecteur `text`
maria$text <- iconv(maria$text, from = "latin1", "utf8")
# Élimination des lignes blanches
maria <- maria[maria$text != "",]
# Élimination du péritexte
maria <- maria[grep("CHAPITRE I\\b", maria$text):nrow(maria),]
# Repérage de la ligne correspondant à chaque début de chapitre
debut_chapitres_v <- which(grepl("CHAPITRE", maria$text))
# Utilisation du vecteur précédent pour indiquer la ligne correspondant à la fin de chaque chapitre
fin_chapitres_v <-
append((debut_chapitres_v[-1] - 1), length(maria$text))
# Création d'une petite fonction permettant la séparation des mots d'une chaîne de caractères (tokénisation)
tokenisation_fun <-
function(texte, debut_chapitre, fin_chapitre) {
texte_v <- texte[as.integer(debut_chapitre):as.integer(fin_chapitre)]
mots_l <- strsplit(texte_v, "\\W")    # séparation de tous les mots
mots_v <- unlist(mots_l)              # transformation de l'objet liste en vecteur
mots_v <- tolower(mots_v)             # Bas de casse
mots_pleins_v <- which(mots_v != "")  # Identificatioon des éléments vides
mots_v <- mots_v[mots_pleins_v]       # Élimination des éléments vides
mots_v <- mots_v[-c(1:2)]             # Élimination des noms de chapitre
return(mots_v)                        # Renvoi explicite de l'objet vecteur
}
# Création d'une liste vide dans laquelle on emmagasinera les mots de chacun des chapitres
mots_chapitres_l <-
vector(mode = "list", length = length(debut_chapitres_v))
# On remplit notre objet liste avec les mots de chacun des chapitre (à l'aide d'une structure de contrôle appelée "boucle for")
for (i in seq_along(debut_chapitres_v)) {
mots_chapitres_l[[i]] <- tokenisation_fun(
texte = maria$text,
debut_chapitre = (debut_chapitres_v[i]),
fin_chapitre = fin_chapitres_v[i]
)
}
# On crée un nouveau tableau de données comprenant une colonne pour les numéros de chapitres:
mots_chapitres_df <-
data.frame(
chapitre = c(
"I",
"II",
"III",
"IV",
"V",
"VI",
"VII",
"VIII",
"IX",
"X",
"XI",
"XII",
"XIII",
"XIV",
"XV",
"XVI"
)
)
# ... une colonne où seront rassemblés tous les mots sous forme de liste:
mots_chapitres_df$mots <- sapply(mots_chapitres_l, "[")
# Et une colonne indiquant le nombre de mots de chaque chapitre
mots_chapitres_df$longueur_chap <- sapply(mots_chapitres_l, length)
# Création d'une colonne avec tous les mots de chaque chapitre distinct joints en une seule chaine de caractères
mots_chapitres_df$texte <-
sapply(mots_chapitres_df$mots, paste, collapse = " ")
# On crée trois colonnes, une pour chacun des prénoms des prétendants de Maria. La valeur correspond au nombre d'occurrences de chaque prénom dans chaque chapitre. La fonction utilisée, `str_count()`, est prise à l'extension stringr.
mots_chapitres_df$francois <-
str_count(mots_chapitres_df$texte, pattern = "fran[cç]ois")
mots_chapitres_df$lorenzo <-
str_count(mots_chapitres_df$texte, pattern = "lorenzo")
mots_chapitres_df$eutrope <-
str_count(mots_chapitres_df$texte, pattern = "eutrope")
mots_chapitres_df
str_extract_all("Ce n'est pas évident", "\\w")
str_extract("Ce n'est pas évident", "\\w+")
grep("\\w+", "Ce n'est pas évident")
grepl("\\w+", "Ce n'est pas évident")
gsub("\\w+", "Ce n'est pas évident")
regexpr("\\w+", "Ce n'est pas évident")
gregexpr("\\w+", "Ce n'est pas évident")
regmatches("\\w+", "Ce n'est pas évident")
regmatches("\\w+", "Ce n'est pas évident")
# Texte d'exemple
texte <- "Alice aime lire des livres. Bob voit un film. Charles prend un café."
# Expression régulière pour extraire les noms propres
pattern <- "\\b[A-Z][a-z]+\\b"
# Utilisation de gregexpr pour repérer toutes les correspondances
matches <- gregexpr(pattern, texte)
# Utilisation de regmatches pour extraire les correspondances
noms_propres <- regmatches(texte, matches)
noms_propres
regmatches(texte, gregexpr("\\w", texte))
regmatches(texte, gregexpr("\\w+", texte))
texte <- "Victor Hugo"
regmatches(texte, gregexpr("\\w+", texte))
regmatches(texte, gregexpr("\\w", texte))
regmatches(texte, regexpr("\\w", texte))
strsplit("Victor Hugo", "\\s")
str_replace("Je mange une pomme.", "\\.", "!")
gsub("\\.", "!", "Je mange une pomme.")
gsub(".", "!", "Je mange une pomme.")
mots_chapitres_df$texte[1]
mots_chapitres_df$texte[1][1:100]
mots_chapitres_df$texte[1][1:100]
substr(mots_chapitres_df$texte[1], 1, 1000)
substr(mots_chapitres_df$texte[1], 1, 2000)
if(!dir.exists("donnees"))
dir.exists("donnees")
if(!dir.exists("donnees")) {dir.create("donnees")}
file.exists("donnees/maria.RDS")
# Importation sous forme de tableau de données du texte de Maria Chapdelaine avec son identifiant unique
if(!dir.exists("donnees")) {dir.create("donnees")}
if(file.exists("donnees/maria.RDS")){
maria <- readRDS("donnees/maria.RDS")
} else {
maria <- gutenberg_download(13525, mirror = "http://mirror.csclub.uwaterloo.ca/gutenberg/")
saveRDS(maria, "donnees/maria.RDS")
}
# Importation sous forme de tableau de données du texte de Maria Chapdelaine avec son identifiant unique
if(!dir.exists("donnees")) {dir.create("donnees")}
if(file.exists("donnees/maria.RDS")){
maria <- readRDS("donnees/maria.RDS")
} else {
maria <- gutenberg_download(13525, mirror = "http://mirror.csclub.uwaterloo.ca/gutenberg/")
saveRDS(maria, "donnees/maria.RDS")
}
# Transformation de l'encodage des chaînes de caractères du vecteur `text`
maria$text <- iconv(maria$text, from = "latin1", "utf8")
#| include: false
inst_ext_fun <- function(extension) {
if(!extension %in% rownames(installed.packages())) {
install.packages(extension, dependencies = TRUE)
}
require(extension, character.only = TRUE)
}
extensions <- c("data.table",
"stringr",
"dplyr",
"ggplot2",
"gutenbergr")
sapply(extensions, inst_ext_fun)
# Nettoyage de l'environnement
rm(list = ls())
#| output: false
# Importation sous forme de tableau de données du texte de Maria Chapdelaine avec son identifiant unique. Si le fichier existe déjà dans le dossier "données", il sera simplement chargé dans l'environnement.
if(!dir.exists("donnees")) {
dir.create("donnees")
}
if (file.exists("donnees/maria.RDS")) {
maria <- readRDS("donnees/maria.RDS")
} else {
maria <- gutenberg_download(13525, mirror = "http://mirror.csclub.uwaterloo.ca/gutenberg/")
saveRDS(maria, "donnees/maria.RDS")
}
# Transformation de l'encodage des chaînes de caractères du vecteur `text`
maria$text <- iconv(maria$text, from = "latin1", "utf8")
# Élimination des lignes blanches
maria <- maria[maria$text != "",]
# Élimination du péritexte
maria <- maria[grep("CHAPITRE I\\b", maria$text):nrow(maria),]
# Repérage de la ligne correspondant à chaque début de chapitre
debut_chapitres_v <- which(grepl("CHAPITRE", maria$text))
# Utilisation du vecteur précédent pour indiquer la ligne correspondant à la fin de chaque chapitre
fin_chapitres_v <-
append((debut_chapitres_v[-1] - 1), length(maria$text))
# Création d'une petite fonction permettant la séparation des mots d'une chaîne de caractères (tokénisation)
tokenisation_fun <-
function(texte, debut_chapitre, fin_chapitre) {
texte_v <- texte[as.integer(debut_chapitre):as.integer(fin_chapitre)]
mots_l <- strsplit(texte_v, "\\W")    # séparation de tous les mots
mots_v <- unlist(mots_l)              # transformation de l'objet liste en vecteur
mots_v <- tolower(mots_v)             # Bas de casse
mots_pleins_v <- which(mots_v != "")  # Identificatioon des éléments vides
mots_v <- mots_v[mots_pleins_v]       # Élimination des éléments vides
mots_v <- mots_v[-c(1:2)]             # Élimination des noms de chapitre
return(mots_v)                        # Renvoi explicite de l'objet vecteur
}
# Création d'une liste vide dans laquelle on emmagasinera les mots de chacun des chapitres
mots_chapitres_l <-
vector(mode = "list", length = length(debut_chapitres_v))
# On remplit notre objet liste avec les mots de chacun des chapitre (à l'aide d'une structure de contrôle appelée "boucle for")
for (i in seq_along(debut_chapitres_v)) {
mots_chapitres_l[[i]] <- tokenisation_fun(
texte = maria$text,
debut_chapitre = (debut_chapitres_v[i]),
fin_chapitre = fin_chapitres_v[i]
)
}
# On crée un nouveau tableau de données comprenant une colonne pour les numéros de chapitres:
mots_chapitres_df <-
data.frame(
chapitre = c(
"I",
"II",
"III",
"IV",
"V",
"VI",
"VII",
"VIII",
"IX",
"X",
"XI",
"XII",
"XIII",
"XIV",
"XV",
"XVI"
)
)
# ... une colonne où seront rassemblés tous les mots sous forme de liste:
mots_chapitres_df$mots <- sapply(mots_chapitres_l, "[")
# Et une colonne indiquant le nombre de mots de chaque chapitre
mots_chapitres_df$longueur_chap <- sapply(mots_chapitres_l, length)
# Création d'une colonne avec tous les mots de chaque chapitre distinct joints en une seule chaine de caractères
mots_chapitres_df$texte <-
sapply(mots_chapitres_df$mots, paste, collapse = " ")
# On crée trois colonnes, une pour chacun des prénoms des prétendants de Maria. La valeur correspond au nombre d'occurrences de chaque prénom dans chaque chapitre. La fonction utilisée, `str_count()`, est prise à l'extension stringr.
mots_chapitres_df$francois <-
str_count(mots_chapitres_df$texte, pattern = "fran[cç]ois")
mots_chapitres_df$lorenzo <-
str_count(mots_chapitres_df$texte, pattern = "lorenzo")
mots_chapitres_df$eutrope <-
str_count(mots_chapitres_df$texte, pattern = "eutrope")
# On peut visualiser la structure de données
mots_chapitres_df
# Exemple simple d'une expression régulière qui repère et extrait tous les mots commençant par une majuscule.
texte <- "Victor Hugo, Emile Zola, et Jean-Paul Sartre sont des écrivains célèbres."
pattern <- "\\b[A-Z][a-z]+\\b"
str_extract_all(texte, pattern) |> unlist()
substr(mots_chapitres_df$texte[1], 1, 2000)
View(maria)
View(maria)
View(mots_chapitres_df)
phrase_a_corriger <- "Dans la petite ville, l’egliste se trouve en face de l’églize principale, qui, selon les habitants, est la plus ancienne eglise du quartier, bien que certains disent que l’eglise a été reconstruite plusieurs fois, car chaque eglise qu’ils ont connue était différente, ce qui rend l’histoire de l’eglisse assez mystérieuse pour ceux qui cherchent à comprendre comment l’egliste a pu résister à toutes ces années d’intempéries, malgré les rumeurs disant que l’eglize est en réalité bien plus récente que ce que les archives indiquent."
str_replace_all(phrase_a_corriger, pattern = "[eé]gli\\w+", "église")
str_replace_all(phrase_a_corriger, pattern = "\\b[eé]gli\\w+", "église")
phrase_a_corriger <- "Dans la petite ville, l’egliste se trouve en face de l’églize principale, qui, selon les habitants, est la plus ancienne eglise du quartier, bien que certains disent que l’eglise a été reconstruite plusieurs fois, car chaque eglise qu’ils ont connue était différente, ce qui rend l’histoire de l’eglisse assez mystérieuse pour ceux qui cherchent à comprendre comment l’egliste a pu résister à toutes ces années d’intempéries, malgré les rumeurs disant que l’eglize est en réalité bien plus récente que ce que les archives indiquent." (OpenAI, ChatGPT-4o, version du 21 septembre 2024.)
phrase_a_corriger <- "Dans la petite ville, l’egliste se trouve en face de l’églize principale, qui, selon les habitants, est la plus ancienne eglise du quartier, bien que certains disent que l’eglise a été reconstruite plusieurs fois, car chaque eglise qu’ils ont connue était différente, ce qui rend l’histoire de l’eglisse assez mystérieuse pour ceux qui cherchent à comprendre comment l’egliste a pu résister à toutes ces années d’intempéries, malgré les rumeurs disant que l’eglize est en réalité bien plus récente que ce que les archives indiquent." #(OpenAI, ChatGPT-4o, version du 21 septembre 2024.)
str_replace_all(phrase_a_corriger, pattern = "\\b[eé]gli\\w+", replacement = "église")
#| output: false
# Importation sous forme de tableau de données du texte de Maria Chapdelaine avec son identifiant unique. Si le fichier existe déjà dans le dossier "données", il sera simplement chargé dans l'environnement.
if(!dir.exists("donnees")) {
dir.create("donnees")
}
if (file.exists("donnees/maria.RDS")) {
maria <- readRDS("donnees/maria.RDS")
} else {
maria <- gutenberg_download(13525, mirror = "http://mirror.csclub.uwaterloo.ca/gutenberg/")
dir.create("donnees")
saveRDS(maria, "donnees/maria.RDS")
}
# Transformation de l'encodage des chaînes de caractères du vecteur `text`
maria$text <- iconv(maria$text, from = "latin1", "utf8")
# Élimination des lignes blanches
maria <- maria[maria$text != "",]
# Élimination du péritexte
maria <- maria[grep("CHAPITRE I\\b", maria$text):nrow(maria),]
# Repérage de la ligne correspondant à chaque début de chapitre
debut_chapitres_v <- which(grepl("CHAPITRE", maria$text))
# Utilisation du vecteur précédent pour indiquer la ligne correspondant à la fin de chaque chapitre
fin_chapitres_v <-
append((debut_chapitres_v[-1] - 1), length(maria$text))
# Création d'une petite fonction permettant la séparation des mots d'une chaîne de caractères (tokénisation)
tokenisation_fun <-
function(texte, debut_chapitre, fin_chapitre) {
texte_v <- texte[as.integer(debut_chapitre):as.integer(fin_chapitre)]
mots_l <- strsplit(texte_v, "\\W")    # séparation de tous les mots
mots_v <- unlist(mots_l)              # transformation de l'objet liste en vecteur
mots_v <- tolower(mots_v)             # Bas de casse
mots_pleins_v <- which(mots_v != "")  # Identificatioon des éléments vides
mots_v <- mots_v[mots_pleins_v]       # Élimination des éléments vides
mots_v <- mots_v[-c(1:2)]             # Élimination des noms de chapitre
return(mots_v)                        # Renvoi explicite de l'objet vecteur
}
# Création d'une liste vide dans laquelle on emmagasinera les mots de chacun des chapitres
mots_chapitres_l <-
vector(mode = "list", length = length(debut_chapitres_v))
# On remplit notre objet liste avec les mots de chacun des chapitre (à l'aide d'une structure de contrôle appelée "boucle for")
for (i in seq_along(debut_chapitres_v)) {
mots_chapitres_l[[i]] <- tokenisation_fun(
texte = maria$text,
debut_chapitre = (debut_chapitres_v[i]),
fin_chapitre = fin_chapitres_v[i]
)
}
# On crée un nouveau tableau de données comprenant une colonne pour les numéros de chapitres:
mots_chapitres_df <-
data.frame(
chapitre = c(
"I",
"II",
"III",
"IV",
"V",
"VI",
"VII",
"VIII",
"IX",
"X",
"XI",
"XII",
"XIII",
"XIV",
"XV",
"XVI"
)
)
# ... une colonne où seront rassemblés tous les mots sous forme de liste:
mots_chapitres_df$mots <- sapply(mots_chapitres_l, "[")
# Et une colonne indiquant le nombre de mots de chaque chapitre
mots_chapitres_df$longueur_chap <- sapply(mots_chapitres_l, length)
# Création d'une colonne avec tous les mots de chaque chapitre distinct joints en une seule chaine de caractères
mots_chapitres_df$texte <-
sapply(mots_chapitres_df$mots, paste, collapse = " ")
# On crée trois colonnes, une pour chacun des prénoms des prétendants de Maria. La valeur correspond au nombre d'occurrences de chaque prénom dans chaque chapitre. La fonction utilisée, `str_count()`, est prise à l'extension stringr.
mots_chapitres_df$francois <-
str_count(mots_chapitres_df$texte, pattern = "fran[cç]ois")
mots_chapitres_df$lorenzo <-
str_count(mots_chapitres_df$texte, pattern = "lorenzo")
mots_chapitres_df$eutrope <-
str_count(mots_chapitres_df$texte, pattern = "eutrope")
# On peut visualiser la structure de données
mots_chapitres_df
